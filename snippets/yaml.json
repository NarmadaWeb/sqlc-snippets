{
  "sqlc.yaml": {
    "prefix": "sqlcconfig",
    "body": [
      "version: \"2\"",
      "",
      "sql:",
      "  - engine: \"postgresql\"",
      "",
      "    # Database connection URL.",
      "    # Replace 'user', 'pass', 'localhost:5432', and 'db' with your actual database credentials and host.",
      "    # Consider using 'sslmode=require' for production environments.",
      "    database:",
      "      url: \"postgres://user:pass@localhost:5432/db?sslmode=disable\"",
      "",
      "    # Path to your SQL schema definition files.",
      "    # These files contain DDL statements like CREATE TABLE, CREATE TYPE, etc.",
      "    schema: \"schema/\"",
      "",
      "    # Path to your SQL query files.",
      "    # These files contain your application's SQL queries (SELECT, INSERT, UPDATE, DELETE).",
      "    queries: \"query/\"",
      "",
      "    gen:",
      "",
      "      # Go language-specific code generation options.",
      "      go:",
      "        # The Go package name for the generated database access code.",
      "        package: \"${1:db}\"",
      "        # The output directory where the generated Go files will be placed.",
      "        out: \"${2:internal/db}\"",
      "        # The SQL driver package to use. 'pgx/v5' is recommended for PostgreSQL",
      "        # due to its performance, features, and native Go types support.",
      "        sql_package: \"pgx/v5\"",
      "",
      "        # Custom type overrides.",
      "        # These mappings translate specific database column types to custom Go types.",
      "        # This is useful for handling types like UUIDs, timestamps, JSONB, etc.,",
      "        # with idiomatic Go types from external packages.",
      "        overrides:",
      "          - db_type: \"uuid\"",
      "            go_type: \"github.com/google/uuid.UUID\"",
      "          - db_type: \"timestamptz\"",
      "            go_type: \"time.Time\"",
      "",
      "      # Kotlin language-specific code generation options (uncomment and configure if needed).",
      "      # kotlin:",
      "      #   package: \"com.example.db\"",
      "      #   out: \"build/generated\""
    ],
    "description": "sqlc configuration template with enhanced explanations, common setup tips, and improved spacing for readability."
  }
}
