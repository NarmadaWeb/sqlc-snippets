{
  "sqlc: Select One": {
    "prefix": "sqlcone",
    "body": [
      "-- This is a sqlc query definition.",
      "-- '-- name: <Name> :one' specifies the query name and that it expects a single row result.",
      "-- The placeholder ${1:GetUser} allows quick renaming of the generated function.",
      "",
      "SELECT * FROM ${2:users}",
      "-- Selects all columns from the specified table. Replace '${2:users}' with your table name.",
      "WHERE id = $1;",
      "-- Filters the results by 'id'. '$1' is a positional parameter for the ID value.",
      "-- Ensure an index exists on the 'id' column for efficient lookups."
    ],
    "description": "SQLC query to fetch a single row by its ID. Provides placeholders for easy customization of function name, table name, and ID parameter."
  },

  "sqlc: Select Many": {
    "prefix": "sqlcmany",
    "body": [
      "-- name: ${1:ListUsers} :many",
      "-- This is a sqlc query definition.",
      "-- '-- name: <Name> :many' specifies the query name and that it expects multiple row results.",
      "-- The placeholder ${1:ListUsers} allows quick renaming of the generated function.",
      "",
      "SELECT * FROM ${2:users}",
      "-- Selects all columns from the specified table. Replace '${2:users}' with your table name.",
      "-- Filters results where 'created_at' is greater than the provided timestamp.",
      "-- '$1' is a positional parameter for the timestamp value.",
      "WHERE created_at > $1",
      "ORDER BY ${3:created_at} DESC",
      "-- Orders the results by the specified column (e.g., 'created_at') in descending order.",
      "-- The placeholder ${3:created_at} allows quick renaming of the order-by column.",
      "LIMIT $2 OFFSET $3;",
      "-- LIMIT $2 restricts the number of rows returned. '$2' is a positional parameter for the limit value (page size).",
      "-- OFFSET $3 skips a specified number of rows. '$3' is a positional parameter for the offset value (page number * page size).",
      "-- WARNING: OFFSET can be slow on very large datasets as it still processes skipped rows.",
      "-- Consider cursor-based pagination (e.g., WHERE id > last_id LIMIT N) for better performance on large tables."
    ],
    "description": "SQLC query to fetch multiple paginated rows. Provides placeholders for function name, table name, filter column, and pagination parameters. Includes tips for indexing and alternative pagination strategies for performance."
  },

  "sqlc: Insert Returning": {
    "prefix": "sqlcinsert",
    "body": [
      "-- name: ${1:CreateUser} :one",
      "-- This is a sqlc query definition.",
      "-- '-- name: <Name> :one' specifies the query name and that it expects a single row result (the inserted row).",
      "-- The placeholder ${1:CreateUser} allows quick renaming of the generated function.",
      "",
      "INSERT INTO ${2:users} (",
      "  -- Specify the columns to insert into. Replace '${2:users}' with your table name.",
      "  -- Placeholders like ${3:name} allow quick renaming of columns.",
      "  \\t${3:name}, ${4:email}, ${5:password_hash}",
      ") VALUES (",
      "  -- Provide values for the columns. $1, $2, $3 are positional parameters.",
      "  \\t$1, $2, $3",
      ")",
      "RETURNING id, created_at;",
      "-- The RETURNING clause allows you to fetch columns from the newly inserted row,",
      "-- such as 'id' (primary key) and 'created_at' (timestamp), without a separate SELECT query."
    ],
    "description": "SQLC query to insert a new record into a table and return specific columns from the inserted row. Provides placeholders for function name, table, columns, and values. Highlights the use of RETURNING for immediate data retrieval."
  },

  "sqlc: Update Exec": {
    "prefix": "sqlcupdate",
    "body": [
      "-- name: ${1:UpdateUser} :exec",
      "-- This is a sqlc query definition for updating existing rows.",
      "-- '-- name: <Name> :exec' specifies the query name and that it does not return any rows (execution only).",
      "-- The placeholder ${1:UpdateUser} allows quick renaming of the generated function.",
      "UPDATE ${2:users}",
      "  -- Updates records in the specified table. Replace '${2:users}' with your table name.",
      "SET name = $1, email = $2, updated_at = NOW()",
      "  -- Sets new values for columns. $1, $2 are positional parameters for name and email.",
      "  -- NOW() automatically sets the 'updated_at' column to the current timestamp.",
      "WHERE id = $3;",
      "-- Filters records to update only the one matching the given ID. $3 is a positional parameter for the ID.",
      "-- Ensure an index exists on the 'id' column (if it's not the primary key) for efficient updates."
    ],
    "description": "SQLC query to update an existing record in a table. Provides placeholders for function name, table, columns, and ID. Highlights the use of positional parameters and NOW() for timestamps."
  },

  "sqlc: Delete Exec": {
    "prefix": "sqlcdelete",
    "body": [
      "-- name: ${1:DeleteUser} :exec",
      "-- This is a sqlc query definition for deleting existing rows.",
      "-- '-- name: <Name> :exec' specifies the query name and that it does not return any rows (execution only).",
      "-- The placeholder ${1:DeleteUser} allows quick renaming of the generated function.",
      "DELETE FROM ${2:users}",
      "-- Deletes records from the specified table. Replace '${2:users}' with your table name.",
      "WHERE id = $1;",
      "-- Filters records to delete only the one matching the given ID. '$1' is a positional parameter for the ID.",
      "-- Ensure an index exists on the 'id' column (if it's not the primary key) for efficient deletions."
    ],
    "description": "SQLC query to delete an existing record from a table. Provides placeholders for function name, table, and ID. Highlights the :exec directive and the importance of indexing for efficient deletions."
  },

  "sqlc: Batch Insert": {
    "prefix": "sqlcbatch",
    "body": [
      "-- name: ${1:BulkCreateUsers} :batchexec",
      "-- This is a sqlc query definition for performing a batch insert operation.",
      "-- '-- name: <Name> :batchexec' specifies the query name and that it's designed for batch execution (does not return rows).",
      "-- The placeholder ${1:BulkCreateUsers} allows quick renaming of the generated function.",
      "INSERT INTO ${2:users} (name, email)",
      "-- Inserts multiple records into the specified table. Replace '${2:users}' with your table name.",
      "-- Specify the columns to insert into (e.g., name, email).",
      "VALUES (",
      "\\t$1, $2",
      ");",
      "-- $1 and $2 are positional parameters that will be filled during batch execution.",
      "-- Each set of values provided in the batch will result in a new row being inserted."
    ],
    "description": "SQLC query for performing a batch insert operation. Provides placeholders for function name, table, and columns. Designed for efficient insertion of multiple records in a single transaction."
  },

  "sqlc: Join with Aggregation": {
    "prefix": "sqlcjoin",
    "body": [
      "-- name: ${1:UserWithOrders} :many",
      "-- This is a sqlc query definition for performing a join with aggregation.",
      "-- '-- name: <Name> :many' specifies the query name and that it expects multiple row results.",
      "-- The placeholder ${1:UserWithOrders} allows quick renaming of the generated function.",
      "SELECT",
      "  -- Selects specific columns from the 'users' table (aliased as 'u').",
      "  \\\\tu.id,",
      "  \\\\tu.name,",
      "  -- Aggregates data from the 'orders' table (aliased as 'o').",
      "  \\\\tCOUNT(o.id) AS order_count,",
      "  \\\\tSUM(o.amount) AS total_amount",
      "FROM ${2:users} u",
      "-- Joins the 'users' table with the 'orders' table on their respective ID columns.",
      "-- Replace '${2:users}' and '${3:orders}' with your actual table names.",
      "LEFT JOIN ${3:orders} o ON u.id = o.user_id",
      "-- Groups the results by user ID to apply aggregate functions (COUNT, SUM) per user.",
      "GROUP BY u.id;",
      "-- For optimal performance, ensure indexes exist on join columns (e.g., u.id, o.user_id).",
      "-- Example: CREATE INDEX ON ${2:users} (id); CREATE INDEX ON ${3:orders} (user_id);"
    ],
    "description": "SQLC query template for joining tables with aggregation (e.g., counting orders per user). Provides placeholders for function name, table names, and aggregate columns. Includes crucial performance advice on indexing join columns."
  },

  "sqlc: JSONB Query": {
    "prefix": "sqlcjson",
    "body": [
      "-- name: ${1:SearchMetadata} :many",
      "SELECT * FROM ${2:users}",
      "-- For optimal performance on JSONB queries, consider adding a GIN index: CREATE INDEX ON ${2:users} USING GIN (metadata);",
      "WHERE metadata @> $1::jsonb;"
    ],
    "description": "Query JSONB field. For performance, consider a GIN index on the JSONB column."
  },

  "sqlc: Array Contains": {
    "prefix": "sqlcarray",
    "body": [
      "-- name: ${1:FindByTags} :many",
      "SELECT * FROM ${2:posts}",
      "-- For optimal performance on array queries, consider adding a GIN index: CREATE INDEX ON ${2:posts} USING GIN (tags);",
      "WHERE $1::text = ANY(tags);"
    ],
    "description": "Query array column. For performance, consider a GIN index on the array column."
  },

  "sqlc: Full Text Search": {
    "prefix": "sqlcfts",
    "body": [
      "-- name: ${1:SearchContent} :many",
      "SELECT * FROM ${2:documents}",
      "WHERE search_vector @@ websearch_to_tsquery('english', $1);",
      "-- Ensure a GIN index exists on the 'search_vector' column for efficient full-text searches."
    ],
    "description": "Full-text search query. Requires a GIN index on the TSVECTOR column for performance."
  },

  "sqlc: Transaction": {
    "prefix": "sqlctx",
    "body": [
      "-- name: ${1:TransferFunds} :exec",
      "BEGIN;",
      "",
      "-- Deduct from sender's account",
      "UPDATE accounts",
      "SET balance = balance - $1",
      "WHERE id = $2;",
      "",
      "-- Add to receiver's account",
      "UPDATE accounts",
      "SET balance = balance + $1",
      "WHERE id = $3;",
      "",
      "-- Record the transfer",
      "INSERT INTO transfers (from_account, to_account, amount)",
      "VALUES ($2, $3, $1);",
      "",
      "-- Important: Ensure proper error handling and rollback mechanisms are in place in your application logic.",
      "COMMIT;"
    ],
    "description": "Transaction block. Remember to handle errors and implement rollback in application code."
  },

  "PG: Create Table": {
    "prefix": "pgtbl",
    "body": [
      "CREATE TABLE ${1:table_name} (",
      "\tid ${2|uuid,serial,bigserial|} PRIMARY KEY DEFAULT uuid_generate_v4(),",
      "\tcreated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),",
      "\tupdated_at TIMESTAMPTZ,",
      "\t${4:column} ${5|text,varchar(255),int,bigint,bool,jsonb,timestamptz|} ${6|NOT NULL,NULL|},$0",
      ");",
      "",
      "COMMENT ON TABLE ${1:table_name} IS '${7:Table description}';"
    ],
    "description": "Create table with audit columns"
  },
  "PG: Create Index": {
    "prefix": "pgidx",
    "body": "CREATE INDEX ${1:concurrently|} ${2:idx_name} ON ${3:table_name} (${4:column});",
    "description": "Buat indeks"
  },

  "PG: Create Enum": {
    "prefix": "pgenum",
    "body": [
      "CREATE TYPE ${1:status} AS ENUM (",
      "\t'${2:active}',",
      "\t'${3:pending}',",
      "\t'${4:deleted}'",
      ");"
    ],
    "description": "Buat tipe enum"
  },

  "PG: Create Function": {
    "prefix": "pgfunc",
    "body": [
      "CREATE OR REPLACE FUNCTION ${1:function_name}(${2:param} ${3:type})",
      "RETURNS ${4:return_type} AS $$",
      "BEGIN",
      "\t${0:-- function logic}",
      "END;",
      "$$ LANGUAGE plpgsql;"
    ],
    "description": "Buat fungsi PL/pgSQL"
  },

  "PG: Update Trigger": {
    "prefix": "pgtrigger",
    "body": [
      "CREATE OR REPLACE FUNCTION update_modified()",
      "RETURNS TRIGGER AS $$",
      "BEGIN",
      "\tNEW.updated_at = NOW();",
      "\tRETURN NEW;",
      "END;",
      "$$ LANGUAGE plpgsql;",
      "",
      "CREATE TRIGGER trg_${1:table_name}_update",
      "\tBEFORE UPDATE ON ${1:table_name}",
      "\tFOR EACH ROW",
      "\tEXECUTE FUNCTION update_modified();"
    ],
    "description": "Pemicu pembaruan stempel waktu otomatis"
  },

  "PG: CTE (With Clause)": {
    "prefix": "pgcte",
    "body": [
      "WITH ${1:cte_name} AS (",
      "\tSELECT ${2:columns}",
      "\tFROM ${3:table}",
      "\tWHERE ${4:condition}",
      ")",
      "SELECT * FROM ${1:cte_name};"
    ],
    "description": "Ekspresi Tabel Umum (CTE)"
  },

  "PG: JSONB Column": {
    "prefix": "pgjsonb",
    "body": "${1:metadata} JSONB NOT NULL DEFAULT '{}'::jsonb",
    "description": "Kolom JSONB dengan nilai default"
  },

  "PG: Array Column": {
    "prefix": "pgarray",
    "body": "${1:tags} TEXT[] NOT NULL DEFAULT '{}'",
    "description": "Kolom array teks"
  },

  "PG: Full-Text Search Setup": {
    "prefix": "pgfts",
    "body": [
      "ALTER TABLE ${1:table_name} ADD COLUMN ${2:search_vector} TSVECTOR;",
      "",
      "CREATE FUNCTION ${1:table_name}_search_update() RETURNS trigger AS $$",
      "BEGIN",
      "\tNEW.${2:search_vector} = ",
      "\t\tto_tsvector('english', ",
      "\t\t\tCOALESCE(NEW.${3:title}, '') || ' ' || ",
      "\t\t\tCOALESCE(NEW.${4:content}, '')",
      "\t\t);",
      "\tRETURN NEW;",
      "END;",
      "$$ LANGUAGE plpgsql;",
      "",
      "CREATE TRIGGER ${1:table_name}_search_trigger",
      "\tBEFORE INSERT OR UPDATE ON ${1:table_name}",
      "\tFOR EACH ROW",
      "\tEXECUTE FUNCTION ${1:table_name}_search_update();",
      "",
      "CREATE INDEX idx_${1:table_name}_search ON ${1:table_name} USING GIN (${2:search_vector});"
    ],
    "description": "Pengaturan pencarian teks lengkap"
  },

  "PG: Generate UUID": {
    "prefix": "pguuid",
    "body": "gen_random_uuid()",
    "description": "Hasilkan UUID v4"
  },

  "sqlc: Model Comment": {
    "prefix": "sqlcmodel",
    "body": [
      "COMMENT ON TABLE ${1:table_name} IS '${2:Description for sqlc model}';",
      "COMMENT ON COLUMN ${1:table_name}.id IS 'Primary key';",
      "COMMENT ON COLUMN ${1:table_name}.created_at IS 'Creation timestamp';"
    ],
    "description": "Tambahkan komentar untuk model sqlc"
  },

  "Explain Analyze": {
    "prefix": "pgexplain",
    "body": "EXPLAIN (ANALYZE, BUFFERS) ${0:query};",
    "description": "Jelaskan kueri dengan analisis"
  },

  "Current Timestamp": {
    "prefix": "pgnow",
    "body": "NOW()",
    "description": "Stempel waktu saat ini"
  },

  "Interval": {
    "prefix": "pginterval",
    "body": "INTERVAL '${1:1} ${2|day,week,month,year|}'",
    "description": "Interval waktu"
  },

  "JSONB Build": {
    "prefix": "pgjsonbuild",
    "body": "jsonb_build_object(${1:'key', $2})",
    "description": "Buat objek JSONB"
  },

  "Array Aggregation": {
    "prefix": "pgarrayagg",
    "body": "ARRAY_AGG(${1:column})",
    "description": "Agregasi ke array"
  },

  "sqlc v2: Named Parameters": {
    "prefix": "sqlcv2",
    "body": [
      "/* name: ${1:UpdateUser} :exec */",
      "UPDATE users",
      "SET",
      "\tname = @name,",
      "\temail = @email,",
      "\tupdated_at = NOW()",
      "WHERE id = @id;"
    ],
    "description": "Parameter bernama sqlc v2"
  },

  "sqlc v2: Batch Many": {
    "prefix": "sqlcv2batch",
    "body": [
      "/* name: ${1:BulkUpdateStatus} :batchmany */",
      "UPDATE users",
      "SET status = @status",
      "WHERE id = @id",
      "RETURNING *;"
    ],
    "description": "Batch sqlc v2 dengan pengembalian"
  },

  "sqlc v2: Custom Types": {
    "prefix": "sqlcv2type",
    "body": [
      "/* name: ${1:CreateUser} :one */",
      "INSERT INTO users (name, preferences)",
      "VALUES (",
      "\t@name,",
      "\t@preferences::jsonb",
      ")",
      "RETURNING *;"
    ],
    "description": "sqlc v2 dengan tipe kustom"
  },

  "PG: Create Extension": {
    "prefix": "pgext",
    "body": "CREATE EXTENSION IF NOT EXISTS \"${1|uuid-ossp,pgcrypto,pg_trgm|}\";",
    "description": "Buat ekstensi PostgreSQL"
  },

  "PG: Add Column": {
    "prefix": "pgaddcol",
    "body": "ALTER TABLE ${1:table_name} ADD COLUMN ${2:column_name} ${3:data_type};",
    "description": "Tambahkan kolom ke tabel"
  },

  "PG: Drop Column": {
    "prefix": "pgdropcol",
    "body": "ALTER TABLE ${1:table_name} DROP COLUMN ${2:column_name};",
    "description": "Hapus kolom dari tabel"
  },

  "PG: Row Level Security": {
    "prefix": "pgrls",
    "body": [
      "ALTER TABLE ${1:table_name} ENABLE ROW LEVEL SECURITY;",
      "",
      "CREATE POLICY ${2:policy_name} ON ${1:table_name}",
      "\tFOR SELECT",
      "\tUSING (${3:user_id} = current_user_id());"
    ],
    "description": "Kebijakan Keamanan Tingkat Baris (RLS)"
  },

  "PG: Grant Permissions": {
    "prefix": "pggrant",
    "body": "GRANT ${1|SELECT,INSERT,UPDATE,DELETE|} ON ${2:table_name} TO ${3:role_name};",
    "description": "Berikan izin tabel"
  },

  "PG: Index on Expression": {
    "prefix": "pgexpridx",
    "body": "CREATE INDEX ${1:idx_name} ON ${2:table_name} (LOWER(${3:column}));",
    "description": "Buat indeks pada ekspresi"
  },

  "PG: Partial Index": {
    "prefix": "pgpartialidx",
    "body": "CREATE INDEX ${1:idx_name} ON ${2:table_name} (${3:column}) WHERE ${4:condition};",
    "description": "Buat indeks parsial"
  },

  "PG: Begin Transaction": {
    "prefix": "pgbegin",
    "body": "BEGIN;\n\n${0:-- test queries}\n\nROLLBACK;",
    "description": "Blok transaksi pengujian"
  },

  "PG: Explain Analyze": {
    "prefix": "pgexplain",
    "body": "EXPLAIN (ANALYZE, BUFFERS, VERBOSE) ${0:query};",
    "description": "Analisis kueri terperinci"
  }
}
